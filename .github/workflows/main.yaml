name: Build, Test and Release

on:
  merge_group:
  pull_request:
    branches:
      - main
  push:
    branches:
      - feat/dotnet-standard2.0
    tags:
      - 'v*'

permissions:
  contents: read

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  test:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Test current LTS across platforms
          - os: ubuntu-latest
            framework: net8.0
          - os: windows-latest
            framework: net8.0
          - os: macos-latest
            framework: net8.0
          # .NET4.8 requires Windows
          - os: windows-latest
            framework: net48
          # .NET Core 3.1 is having libssl issues on Linux
          - os: windows-latest
            framework: netcoreapp3.1
          # Test latest version on Linux
          - os: ubuntu-latest
            framework: net9.0

    name: Test ${{ matrix.framework }} on ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.2.2
        with:
          fetch-depth: 0

      - name: Setup .NET versions
        uses: actions/setup-dotnet@d4c94342e560b34958eacfc5d055d21461ed1c5d # v5.0.0
        with:
          dotnet-version: |
            3.1.x
            6.0.x
            8.0.x
            9.0.x

      - name: Cache NuGet packages
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore --verbosity minimal

      - name: Build SDK and test project
        run: dotnet build --no-restore --configuration Release --verbosity minimal

      - name: Run tests for specific framework
        run: dotnet test src/OpenFga.Sdk.Test/OpenFga.Sdk.Test.csproj --no-build --configuration Release --framework ${{ matrix.framework }} --verbosity normal --logger trx --results-directory TestResults/ /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

      - name: Upload test results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.framework }}
          path: TestResults/

      - name: Upload coverage to Codecov
        # Only upload coverage from one matrix job to avoid conflicts
        if: matrix.os == 'ubuntu-latest' && matrix.framework == 'net8.0'
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        continue-on-error: true
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: openfga/dotnet-sdk

  build-verification:
    runs-on: ubuntu-latest
    name: Build Verification

    steps:
      - name: Checkout code
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.2.2
        with:
          fetch-depth: 0

      - name: Setup .NET versions
        uses: actions/setup-dotnet@d4c94342e560b34958eacfc5d055d21461ed1c5d # v5.0.0
        with:
          dotnet-version: |
            3.1.x
            6.0.x
            8.0.x
            9.0.x

      - name: Restore dependencies
        run: dotnet restore --verbosity minimal

      - name: Build SDK for all target frameworks
        run: dotnet build src/OpenFga.Sdk/OpenFga.Sdk.csproj --no-restore --configuration Release --verbosity normal

      - name: Verify all framework outputs exist
        run: |
          echo "Checking build outputs..."
          ls -la src/OpenFga.Sdk/bin/Release/

          # Verify each framework was built successfully
          frameworks=("netstandard2.0" "net48" "net8.0" "net9.0")
          for framework in "${frameworks[@]}"; do
            if [ -d "src/OpenFga.Sdk/bin/Release/${framework}" ]; then
              echo "✅ ${framework} build output found"
              ls -la "src/OpenFga.Sdk/bin/Release/${framework}/"
            else
              echo "❌ ${framework} build output missing"
              exit 1
            fi
          done

      - name: Upload SDK artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: sdk-build-outputs
          path: src/OpenFga.Sdk/bin/Release/

  publish:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-test')
    needs: [test, build-verification]

    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.2.2
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@d4c94342e560b34958eacfc5d055d21461ed1c5d # v5.0.0
        with:
          dotnet-version: |
            3.1.x
            8.0.x
            9.0.x
          source-url: https://api.nuget.org/v3/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.NUGET_AUTH_TOKEN}}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: nuget-package
          path: src/OpenFga.Sdk/bin/Release/OpenFga.Sdk.*.nupkg

      - name: Publish
        run: dotnet nuget push src/OpenFga.Sdk/bin/Release/OpenFga.Sdk.*.nupkg --api-key ${NUGET_AUTH_TOKEN}
        env:
          NUGET_AUTH_TOKEN: ${{secrets.NUGET_AUTH_TOKEN}}

  create-release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-test')
    needs: [publish]

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.2.2
        with:
          fetch-depth: 0

      - name: Download NuGet package artifact
        uses: actions/download-artifact@9c19ed7fe5d278cd354c7dfd5d3b88589c7e2395 # v4.1.8
        with:
          name: nuget-package
          path: ./release-assets/

      - name: Download SDK build outputs
        uses: actions/download-artifact@9c19ed7fe5d278cd354c7dfd5d3b88589c7e2395 # v4.1.8
        with:
          name: sdk-build-outputs
          path: ./sdk-build-outputs/

      - name: Create release assets archives
        run: |
          # Create individual ZIP files for each target framework
          cd sdk-build-outputs
          
          # List available frameworks
          echo "Available frameworks:"
          ls -la
          
          # Create framework-specific ZIP files
          frameworks=("netstandard2.0" "net48" "net8.0" "net9.0")
          for framework in "${frameworks[@]}"; do
            if [ -d "$framework" ]; then
              echo "Creating ZIP for $framework"
              cd "$framework"
              zip -r "../../release-assets/OpenFga.Sdk-${framework}.zip" .
              cd ..
            else
              echo "Warning: Framework $framework directory not found"
            fi
          done
          
          # Create combined ZIP with all frameworks
          echo "Creating combined ZIP with all frameworks"
          zip -r ../release-assets/OpenFga.Sdk-all-frameworks.zip .
          cd ..

      - name: Create GitHub Release
        id: create_release
        uses: Roang-zero1/github-create-release-action@57eb9bdce7a964e48788b9e78b5ac766cb684803 # v3.0.1
        with:
          version_regex: ^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+
          prerelease_regex: ^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+-(alpha|beta|preview)\.[[:digit:]]+$
          changelog_file: CHANGELOG.md
          create_draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Find NuGet package file
        id: find_nupkg
        run: |
          NUPKG_FILE=$(find ./release-assets -name "OpenFga.Sdk.*.nupkg" -type f | head -n 1)
          echo "nupkg_path=$NUPKG_FILE" >> $GITHUB_OUTPUT
          echo "nupkg_name=$(basename $NUPKG_FILE)" >> $GITHUB_OUTPUT

      - name: Upload NuGet package to release
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_nupkg.outputs.nupkg_path }}
          asset_name: ${{ steps.find_nupkg.outputs.nupkg_name }}
          asset_content_type: application/octet-stream

      - name: Upload framework-specific build outputs
        run: |
          # Upload individual framework ZIP files
          frameworks=("netstandard2.0" "net48" "net8.0" "net9.0")
          for framework in "${frameworks[@]}"; do
            if [ -f "./release-assets/OpenFga.Sdk-${framework}.zip" ]; then
              echo "Uploading ${framework} ZIP file"
              curl -L \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/zip" \
                "${{ steps.create_release.outputs.upload_url }}?name=OpenFga.Sdk-${{ github.ref_name }}-${framework}.zip" \
                --data-binary "@./release-assets/OpenFga.Sdk-${framework}.zip"
            else
              echo "Warning: ${framework} ZIP file not found"
            fi
          done

      - name: Upload combined build outputs to release  
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-assets/OpenFga.Sdk-all-frameworks.zip
          asset_name: OpenFga.Sdk-${{ github.ref_name }}-all-frameworks.zip
          asset_content_type: application/zip
